Below is a comprehensive Markdown document that includes the schema details along with Supabase-specific notes and SQL examples for creating the necessary tables. You can adjust this as your project requirements evolve.
Sickness Tracker Schema Documentation (Supabase Backend)

This document outlines the data models, database schema, and API endpoints for the Gauntlet crew sickness tracker web app, using Supabase as the backend. The app is designed to track team health status over time and provide a dashboard with key statistics and charts.
1. Database Schema (Supabase)

Supabase uses PostgreSQL, so the following SQL examples demonstrate how to create the necessary tables. You may run these statements in the Supabase SQL editor.
1.1. Users Table

This table stores user authentication and profile details. Users sign up with their email, password, full name, and room number. The health_status field indicates the user's current health state.
SQL Example

-- Enable the uuid-ossp extension if not already enabled
create extension if not exists "uuid-ossp";

create table users (
    id uuid primary key default uuid_generate_v4(),
    email text not null unique,
    password text not null,  -- Store hashed passwords only
    full_name text not null,
    room_number text not null,
    health_status text not null default 'healthy' check (health_status in ('healthy', 'sick')),
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

1.2. Infection Events Table

This table tracks health status changes for each user. Each event records when a user’s health status changed (e.g., from sick to healthy).
SQL Example

create table infection_events (
    id uuid primary key default uuid_generate_v4(),
    user_id uuid not null references users(id) on delete cascade,
    status text not null check (status in ('healthy', 'sick')),
    event_timestamp timestamptz not null default now()
);

    Note: While the earlier design mentioned an array of infection events in the user model, here we use a separate table for better normalization and easier querying.

2. Data Models
2.1. User Model

Each user record includes:

    id: UUID (primary key)
    email: String (unique)
    password: String (hashed; never returned in API responses)
    fullName: String
    roomNumber: String
    healthStatus: Enum (healthy, sick)
    createdAt: Timestamp
    updatedAt: Timestamp

    Example (JSON):

{
  "id": "a1b2c3d4-5678-90ab-cdef-1234567890ab",
  "email": "user@example.com",
  "fullName": "John Doe",
  "roomNumber": "101",
  "healthStatus": "sick",
  "createdAt": "2025-01-20T12:00:00Z",
  "updatedAt": "2025-02-05T10:00:00Z"
}

2.2. InfectionEvent Model

Each event records a status change:

    id: UUID (primary key)
    user_id: UUID (foreign key referencing the user)
    status: Enum (healthy, sick)
    event_timestamp: Timestamp

    Example (JSON):

{
  "id": "event1234-5678-90ab-cdef-1234567890ab",
  "user_id": "a1b2c3d4-5678-90ab-cdef-1234567890ab",
  "status": "sick",
  "event_timestamp": "2025-02-01T08:30:00Z"
}

3. API Endpoints

These endpoints are intended to be implemented (or proxied via Supabase Edge Functions) to handle user registration, login, dashboard data retrieval, and health status updates.
3.1. User Authentication
POST /auth/signup

Registers a new user.

    Request Body:

    {
      "email": "user@example.com",
      "password": "password123",
      "fullName": "John Doe",
      "roomNumber": "101"
    }

    Response:
        Success (201 Created): Returns the user object (excluding the password) and an authentication token.
        Error (400/409): Error message if the email is already in use or if validation fails.

    Supabase Integration: Use Supabase Auth to handle secure password storage and user session management.

POST /auth/login

Logs in an existing user.

    Request Body:

    {
      "email": "user@example.com",
      "password": "password123"
    }

    Response:
        Success (200 OK): Returns an authentication token and the user’s basic details.
        Error (401 Unauthorized): Error message if credentials are invalid.

3.2. Dashboard & Stats
GET /dashboard

Fetches data for the dashboard, including key statistics and chart data.

    Response:

    {
      "stats": {
        "infected": 10,    // Users with current healthStatus "sick"
        "recovered": 5,    // Users with a past infection event, now marked "healthy"
        "pure": 15         // Users who have never been sick
      },
      "chartData": [
        { "date": "2025-01-30", "activeCases": 8 },
        { "date": "2025-01-31", "activeCases": 9 },
        { "date": "2025-02-01", "activeCases": 10 }
      ],
      "foodDelivery": [
        {
          "fullName": "Jane Smith",
          "roomNumber": "102"
        },
        {
          "fullName": "John Doe",
          "roomNumber": "101"
        }
      ]
    }

    Explanation:
        infected: Count of users with health_status set to "sick".
        recovered: Count of users who were previously sick (have an entry in infection_events) but are now "healthy".
        pure: Count of users with no recorded infection events (always "healthy").

3.3. Update Health Status
POST /user/update-status

Allows a user to update their health status. For example, a user can mark themselves as healthy upon recovery.

    Request Body:

    {
      "healthStatus": "healthy"
    }

    Response:
        Success (200 OK): Returns the updated user object.
        Error (400 Bad Request): Error message if the transition is invalid (for example, if the user is already marked as "healthy").

    Note: Every time a status update occurs, record a new entry in the infection_events table to track the change.

4. Frontend Dashboard Components

While the frontend is handled separately, the following outlines the data requirements:

    Login Page:
        Sign-Up Form: Fields for email, password, full name, and room number.
        Login Form: Email and password inputs.

    Dashboard Page:
        Stats Section: Displays counts for:
            Challengers Infected: (users with health_status of "sick")
            Challengers Recovered: (users who have recovered)
            Challengers Pure: (users never infected)
        Chart: A graph displaying active cases over time.
        Food Delivery List: A sortable list showing the currently sick users (displaying name and room number).
        Update Health Status Button: Typically located at the bottom right to allow users to update their status.

5. Additional Considerations

    Security:
        Use Supabase Auth and Row Level Security (RLS) to protect user data.
        Ensure that passwords are hashed securely.
    Data Validation:
        Validate inputs on both the client and server sides.
        Enforce logical health status transitions.
    Extensibility:
        Additional fields (e.g., symptoms, duration of illness) can be added in future iterations.
        Consider logging extra metadata (such as IP addresses) for audit purposes.

This markdown document serves as the foundational blueprint for your Supabase-backed sickness tracker project. Adjust and extend the tables, endpoints, and models as new requirements or features are added.
